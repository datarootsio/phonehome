// Package docs GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag
package docs

import (
	"bytes"
	"encoding/json"
	"strings"
	"text/template"

	"github.com/swaggo/swag"
)

var doc = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "phomehome.dev",
            "url": "https://github.com/datarootsio/phonehome"
        },
        "license": {
            "name": "MIT",
            "url": "https://github.com/datarootsio/phonehome/LICENSE"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/{organisation}/{repository}": {
            "get": {
                "description": "Fetch telemetry calls with optional filtering.",
                "produces": [
                    "application/json"
                ],
                "summary": "Fetch telemetry calls.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "github organisation",
                        "name": "organisation",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "repository name",
                        "name": "repository",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "filter by key passed in POST payload",
                        "name": "key",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "from date to filter on",
                        "name": "from_date",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "to date to filter on",
                        "name": "to_date",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/main.CallsResp"
                        }
                    }
                }
            },
            "post": {
                "description": "Register new call.\n\nRequires a JSON body in the shape of ` + "`" + `{\"foo\": \"bar\", \"coffee\": 432}` + "`" + `.\nExpects either an empty object ` + "`" + `{}` + "`" + ` or an object that only contains keys and **unnested** values.\nNested objects will be stripped from the payload and a warning message will be returned.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Register new telemetry call.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "github organisation",
                        "name": "organisation",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "repository name",
                        "name": "repository",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "repository name",
                        "name": "repository",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/main.RegisterResp"
                        }
                    }
                }
            }
        },
        "/{organisation}/{repository}/count": {
            "get": {
                "description": "Count telemetry calls with optional filtering.",
                "produces": [
                    "application/json"
                ],
                "summary": "Count telemetry calls.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "github organisation",
                        "name": "organisation",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "repository name",
                        "name": "repository",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "filter by key passed in POST payload",
                        "name": "key",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "from date to filter on",
                        "name": "from_date",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "to date to filter on",
                        "name": "to_date",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/main.Call"
                            }
                        }
                    }
                }
            }
        },
        "/{organisation}/{repository}/count/badge": {
            "get": {
                "description": "Will give back a full count of telemetry calls.\nCheck out the documentation at [shields.io](https://shields.io/endpoint) for more details.",
                "produces": [
                    "application/json"
                ],
                "summary": "shield.io badge information.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "github organisation",
                        "name": "organisation",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "repository name",
                        "name": "repository",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/main.BadgeInfo"
                        }
                    }
                }
            }
        },
        "/{organisation}/{repository}/count/daily": {
            "get": {
                "description": "Count telemetry calls with optional filtering.",
                "produces": [
                    "application/json"
                ],
                "summary": "Count telemetry calls grouped by date.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "github organisation",
                        "name": "organisation",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "repository name",
                        "name": "repository",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "filter by key passed in POST payload",
                        "name": "key",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "from date to filter on",
                        "name": "from_date",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "to date to filter on",
                        "name": "to_date",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/main.Call"
                            }
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "main.BadgeInfo": {
            "type": "object",
            "properties": {
                "color": {
                    "type": "string"
                },
                "label": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                },
                "schemaVersion": {
                    "type": "integer"
                }
            }
        },
        "main.Call": {
            "type": "object",
            "properties": {
                "organisation": {
                    "type": "string"
                },
                "payload": {
                    "type": "object"
                },
                "repository": {
                    "type": "string"
                }
            }
        },
        "main.CallsResp": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/main.Call"
                    }
                },
                "error": {
                    "type": "string"
                },
                "query": {
                    "$ref": "#/definitions/main.FilterQuery"
                }
            }
        },
        "main.FilterQuery": {
            "type": "object",
            "properties": {
                "from_date": {
                    "type": "string"
                },
                "group_by": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "organisation": {
                    "type": "string"
                },
                "repository": {
                    "type": "string"
                },
                "to_date": {
                    "type": "string"
                }
            }
        },
        "main.RegisterResp": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                },
                "payload": {
                    "type": "object"
                },
                "query": {
                    "$ref": "#/definitions/main.FilterQuery"
                }
            }
        }
    },
    "securityDefinitions": {
        "BasicAuth": {
            "type": "basic"
        }
    }
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Schemes     []string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = swaggerInfo{
	Version:     "1.0",
	Host:        "api.phonehome.dev",
	BasePath:    "",
	Schemes:     []string{},
	Title:       "phonehome.dev",
	Description: "KISS telemetry server for FOSS packages.",
}

type s struct{}

func (s *s) ReadDoc() string {
	sInfo := SwaggerInfo
	sInfo.Description = strings.Replace(sInfo.Description, "\n", "\\n", -1)

	t, err := template.New("swagger_info").Funcs(template.FuncMap{
		"marshal": func(v interface{}) string {
			a, _ := json.Marshal(v)
			return string(a)
		},
		"escape": func(v interface{}) string {
			// escape tabs
			str := strings.Replace(v.(string), "\t", "\\t", -1)
			// replace " with \", and if that results in \\", replace that with \\\"
			str = strings.Replace(str, "\"", "\\\"", -1)
			return strings.Replace(str, "\\\\\"", "\\\\\\\"", -1)
		},
	}).Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, sInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register("swagger", &s{})
}
